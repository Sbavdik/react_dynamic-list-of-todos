{"version":3,"sources":["types/Filter.ts","components/Todo/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterBy","TodoItem","todo","onShowTodo","isTodoSelected","id","title","completed","className","classNames","type","onClick","TodoList","todos","selectedTodo","map","TodoFilter","query","onQueryChange","filterBy","onSelect","value","onChange","target","ALL","ACTIVE","COMPLETED","placeholder","event","length","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","useState","user","setUser","fetchData","a","userId","currentUser","Error","console","warn","message","useEffect","href","email","name","App","setTodos","setSelectedTodo","setQuery","setFilterBy","isLoadingError","setIsLoadingError","isDataLoading","setIsDataLoading","visibleTodos","preparedTodos","preparedQuery","trim","toLowerCase","filter","includes","filteredTodos","data","useCallback","handleClose","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.15f7018f.chunk.js","sourcesContent":["export enum FilterBy {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  onShowTodo: (todo: Todo) => void;\n  isTodoSelected: boolean;\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  onShowTodo,\n  isTodoSelected,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  return (\n    <>\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        {isTodoSelected ? (\n          <button\n            data-cy=\"selectButton\"\n            className=\"button\"\n            type=\"button\"\n          >\n            <span className=\"icon\">\n              <i className=\"far fa-eye-slash\" />\n            </span>\n          </button>\n        ) : (\n          <button\n            data-cy=\"selectButton\"\n            className=\"button\"\n            type=\"button\"\n            onClick={() => onShowTodo(todo)}\n          >\n            <span className=\"icon\">\n              <i className=\"far fa-eye\" />\n            </span>\n          </button>\n        )}\n      </td>\n    </>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../Todo/TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  onShowTodo: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onShowTodo,\n  selectedTodo,\n}) => {\n  return (\n\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const isTodoSelected = selectedTodo?.id === todo.id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': isTodoSelected,\n              })}\n              key={todo.id}\n            >\n\n              <TodoItem\n                todo={todo}\n                onShowTodo={onShowTodo}\n                isTodoSelected={isTodoSelected}\n              />\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { FilterBy } from '../../types/Filter';\n\ntype Props = {\n  query: string;\n  onQueryChange: (query: string) => void;\n  filterBy: FilterBy;\n  onSelect: (filteBy: FilterBy) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onQueryChange,\n  filterBy,\n  onSelect,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterBy}\n          onChange={({ target }) => {\n            onSelect(target.value as FilterBy);\n          }}\n        >\n          <option value={FilterBy.ALL}>{FilterBy.ALL}</option>\n          <option value={FilterBy.ACTIVE}>{FilterBy.ACTIVE}</option>\n          <option value={FilterBy.COMPLETED}>{FilterBy.COMPLETED}</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => {\n          onQueryChange(event.target.value);\n        }}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query.length > 0 && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => {\n              onQueryChange('');\n            }}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\n\ntype Props = {\n  onClose: () => void;\n  selectedTodo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const fetchData = async () => {\n    try {\n      const currentUser = await getUser(selectedTodo?.userId || 0);\n\n      setUser(currentUser);\n    } catch (error) {\n      if (error instanceof Error) {\n        // eslint-disable-next-line no-console\n        console.warn(error.message);\n      }\n\n      // eslint-disable-next-line no-console\n      console.warn('Unexpected error');\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { FilterBy } from './types/Filter';\nimport { getTodos } from './api';\n\nconst filteredTodos = (todos: Todo[], query: string, filterBy: FilterBy) => {\n  let preparedTodos = [...todos];\n\n  if (query) {\n    const preparedQuery = query.trim().toLowerCase();\n\n    preparedTodos = preparedTodos.filter(({ title }) => title.toLowerCase().includes(preparedQuery));\n  }\n\n  switch (filterBy) {\n    case FilterBy.ACTIVE:\n      preparedTodos = preparedTodos.filter(({ completed }) => !completed);\n      break;\n    case FilterBy.COMPLETED:\n      preparedTodos = preparedTodos.filter(({ completed }) => completed);\n      break;\n    case FilterBy.ALL:\n    default:\n      break;\n  }\n\n  return preparedTodos;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [filterBy, setFilterBy] = useState<FilterBy>(FilterBy.ALL);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [isDataLoading, setIsDataLoading] = useState(false);\n\n  const visibleTodos = filteredTodos(todos, query, filterBy);\n\n  const fetchData = async () => {\n    setIsDataLoading(true);\n\n    try {\n      const data = await getTodos();\n\n      setTodos(data);\n      setIsDataLoading(false);\n      setIsLoadingError(false);\n    } catch (error) {\n      setIsLoadingError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const onShowTodo = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, [selectedTodo]);\n\n  const handleClose = useCallback(() => {\n    setSelectedTodo(null);\n  }, [selectedTodo]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onQueryChange={setQuery}\n                filterBy={filterBy}\n                onSelect={setFilterBy}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isDataLoading && <Loader />}\n\n              {isLoadingError\n                ? <p>Error, server is unavailable</p>\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    onShowTodo={onShowTodo}\n                    selectedTodo={selectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          onClose={handleClose}\n          selectedTodo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}